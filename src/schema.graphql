schema {
  query: Query
  mutation: Mutation
}

scalar DateTime

type Query {
  # Movie operations - used by frontend
  getMovie(id: ID!): Movie
  getAllMovies(limit: Int, searchTerm: String, tmdbId: String, cursor: String): MoviesResult
  getMovieByTmdbId(tmdbId: String!, limit: Int, cursor: String): Movie
  getMoviesByTitle(title: String, limit: Int, cursor: String): MoviesResult
  
  # Arena operations - used by frontend
  getRandomMovieMatchup: Matchup
  
  # Authentication operations - used by frontend
  checkAuth(token: String): CheckAuth
}

type Mutation {
  # Movie operations - used by frontend
  addMovie(
    title: String!
    releaseDate: String
    overview: String
    genres: [String]
    revenue: String
    posterUrl: String
    backdropUrl: String
    tmdbId: String
    addedBy: ID
    lastUpdated: DateTime
    createdAt: DateTime
    totalWins: Int
    totalLosses: Int
    winningPercentage: Float
    totalComparisons: Int
  ): Movie

  updateMovie(
    id: ID!
    title: String
    releaseDate: String
    posterUrl: String
    backdropUrl: String
    tmdbId: String
    overview: String
  ): Movie

  deleteMovie(id: ID!): Boolean
  
  # User operations - used by frontend
  login(email: String!, password: String!): AuthToken
  
  signup(
    username: String!
    email: String!
    password: String!
    displayName: String
  ): AuthToken
  
  # Arena operations - used by frontend
  submitVote(movie1Id: ID!, movie2Id: ID!, winnerId: ID!): VoteResult
  
  # Admin operations - admin only
  cleanupVotes(userId: ID, movieId: ID, resetAll: Boolean): CleanupResult

  submitFeedback(
    email: String
    comments: String!
    timestamp: DateTime!
  ): FeedbackResult
}

type Movie {
  id: ID
  title: String
  rated: String
  releaseDate: String
  overview: String
  genres: [String]
  revenue: String
  posterUrl: String
  backdropUrl: String
  tmdbId: String
  addedBy: ID
  lastUpdated: DateTime
  createdAt: DateTime
  totalWins: Int
  totalLosses: Int
  winningPercentage: Float
  totalComparisons: Int
}

type MoviesResult {
  searchResults: [Movie]
  newTotalMovieCount: Int
  newCursor: String
  endOfResults: Boolean
}

type AuthToken {
  token: String!
  user: User!
}

type User {
  id: ID!
  username: String!
  email: String!
  displayName: String
  totalVotes: Int!
  joinDate: String!
  role: String!
  emailVerified: Boolean!
}

type CheckAuth {
  isValid: Boolean
  message: String
}

type Matchup {
  movie1: Movie!
  movie2: Movie!
  comparisonId: ID
}

type Comparison {
  id: ID!
  movie1Id: ID!
  movie2Id: ID!
  movie1Wins: Int!
  movie2Wins: Int!
  totalVotes: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type Vote {
  id: ID!
  userId: ID!
  comparisonId: ID!
  movie1Id: ID!
  movie2Id: ID!
  winnerId: ID!
  timestamp: DateTime!
  sessionId: String
  userAgent: String
}

type Feedback {
  id: ID!
  email: String
  comments: String!
  timestamp: DateTime!
}

type VoteResult {
  success: Boolean!
  message: String
  comparison: Comparison
}

type CleanupResult {
  success: Boolean!
  message: String
  deletedVotes: Int
  affectedUsers: Int
  affectedMovies: Int
}

type FeedbackResult {
  success: Boolean!
  message: String
  feedback: Feedback
}
