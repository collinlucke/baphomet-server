schema {
  query: Query
  mutation: Mutation
}

scalar DateTime

type Query {
  # Movie operations - used by frontend
  getMovie(id: ID!): Movie
  getAllMovies(limit: Int, searchTerm: String, cursor: String, loadAction: String): MoviesResult
  
  # Authentication operations - used by frontend
  checkAuth(token: String): CheckAuth
}

type Mutation {
  # Movie operations - used by frontend
  addMovie(
    title: String!
    releaseDate: String
    overview: String
    genres: [String]
    revenue: String
    posterUrl: String
    backdropUrl: String
    tmdbId: String
    addedBy: ID
    lastUpdated: DateTime
    createdAt: DateTime
    totalWins: Int
    totalLosses: Int
    winningPercentage: Float
    totalComparisons: Int
  ): Movie

  updateMovie(
    id: ID!
    title: String
    releaseDate: String
    posterUrl: String
    backdropUrl: String
    tmdbId: String
    overview: String
  ): Movie

  deleteMovie(id: ID!): Boolean
  
  # User operations - used by frontend
  login(email: String!, password: String!): AuthToken
  
  signup(
    username: String!
    email: String!
    password: String!
    displayName: String
  ): AuthToken
}

type Movie {
  id: ID
  title: String
  rated: String
  releaseDate: String
  overview: String
  genres: [String]
  revenue: String
  posterUrl: String
  backdropUrl: String
  tmdbId: String
  addedBy: ID
  lastUpdated: DateTime
  createdAt: DateTime
  totalWins: Int
  totalLosses: Int
  winningPercentage: Float
  totalComparisons: Int
}

type MoviesResult {
  searchResults: [Movie]
  newTotalMovieCount: Int
  newCursor: String
  loadAction: String,
  endOfResults: Boolean
}

type AuthToken {
  token: String!
  user: User!
}

type User {
  id: ID!
  username: String!
  email: String!
  displayName: String
  totalVotes: Int!
  joinDate: String!
  role: String!
  emailVerified: Boolean!
}

type CheckAuth {
  isValid: Boolean
  message: String
}
